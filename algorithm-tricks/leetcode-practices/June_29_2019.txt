64. Minimum Path Sum (Medium)
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.
    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length][grid[0].length];
        dp[0][0]= grid[0][0];
        
        for(int i=1;i<grid.length;i++)
            dp[i][0] = dp[i-1][0] + grid[i][0];
                                          
        for(int i=1;i<grid[0].length;i++)
            dp[0][i] = dp[0][i-1] + grid[0][i];
        
        for(int i=1;i<grid.length;i++)
            for(int j=1;j<grid[0].length;j++)
                dp[i][j] = Math.min(dp[i-1][j],dp[i][j-1]) + grid[i][j];
        return dp[grid.length-1][grid[0].length-1];                                          
    }

    // Time Limit Exceeded
    public int uniquePaths(int m, int n) {
        if(m<=0 && n<=0) return 0;
        if(m==1||n==1) return 1;
        return uniquePaths(m-1,n)+uniquePaths(m,n-1);
    }
    
62. Unique Paths (Medium)
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?

    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        dp[0][0] = 1;
        
        for(int i=1;i<m;i++)
            dp[i][0]=dp[i-1][0];
        
        for(int i=1;i<n;i++)
            dp[0][i]=dp[0][i-1];
        
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
            {
                dp[i][j] = dp[i-1][j]+dp[i][j-1];
            }
        return dp[m-1][n-1];
    }

    // Time Limit Exceeded
    public int uniquePaths(int m, int n) {
        if(m<=0 && n<=0) return 0;
        if(m==1||n==1) return 1;
        return uniquePaths(m-1,n)+uniquePaths(m,n-1);
    }

63. Unique Paths II (Medium)
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.
Note: m and n will be at most 100.

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int[][] dp = obstacleGrid;
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        
        dp[0][0] = (dp[0][0]==1) ? 0 : 1; 
        
        for(int i=1;i < m;i++)
            dp[i][0]= (dp[i][0]==1) ? 0 : dp[i-1][0];   

        for(int i=1;i < n;i++)
            dp[0][i] = (dp[0][i]==1) ? 0: dp[0][i-1];
        
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
                dp[i][j]  = (dp[i][j]==1) ? 0 : dp[i-1][j]+dp[i][j-1];
        
        return dp[m-1][n-1];
    }
