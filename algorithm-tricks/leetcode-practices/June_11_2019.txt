2. Add Two Numbers
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
// Time ~ O(Na + Nb), Space ~ O(Na + Nb) 
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode temp = dummy;
        ListNode p = l1;
        ListNode q = l2;
        int carry = 0;
        
        while(p!=null || q !=null)
        {
            int x = (p==null) ? 0: p.val;
            int y = (q==null) ? 0: q.val;
            int sum = x + y + carry;
            temp.next = new ListNode(sum%10);
            carry = sum/10;
            
            if(p!=null) p=p.next;
            if(q!=null) q=q.next;            
            temp = temp.next;
        }
        
        if(carry > 0) temp.next = new ListNode(carry);
        return dummy.next;
    }

50. Pow(x, n) Medium
Implement pow(x, n), which calculates x raised to the power n (xn).
Example 1:  Input: 2.00000, 10  Output: 1024.00000
Example 2:  Input: 2.10000, 3   Output: 9.26100
Example 3:  Input: 2.00000, -2  Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
Note: -100.0 < x < 100.0
n is a 32-bit signed integer, within the range [−231, 231 − 1]

https://leetcode.wang/leetCode-50-Pow.html

// Brute Force: O(N) Time where n is the power.
    public double myPow(double x, int n) {
        if(n==0) return 1.0;
        double res = x;
        
        if(n>=0)
        {
            for(int i=1;i<n;i++)
                    res=res*x;
        }
        else if(n < 0)
        {
            n = Math.abs(n);
            for(int i=0;i<=n;i++)
                    res=res/x;            
        }
        
        return res;
    }
