46. Permutations
Given a collection of distinct integers, return all possible permutations.

Example:
Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        permutation(nums , result, new ArrayList<Integer>());
        return result;
    }
    
    public void permutation(int[] nums, List<List<Integer>> result, List<Integer> l)
    {
        if(l.size()==nums.length)
        {
            result.add(new ArrayList(l));
            return;
        }
        
        for(int i=0;i< nums.length;i++)
        {
            if(l.contains(nums[i])) continue; //permutation without repetition
            
            l.add(nums[i]);
            permutation(nums, result, l);
            l.remove(l.size()-1);
        }
    }
}

47. Permutations II (Medium)
Given a collection of numbers that might contain duplicates, return all possible unique permutations.
Example:
Input: [1,1,2]
Output:
[ [1,1,2],
  [1,2,1],
  [2,1,1]]

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        permutation(nums, new boolean[nums.length], result, new ArrayList<Integer>(), 0);
        return result;
    }
    
    public void permutation(int[] nums, boolean[] used, List<List<Integer>> result, List<Integer> l, int level)
    {
        if(level==nums.length)
        {
            result.add(new ArrayList<Integer>(l));
            return;            
        }
        
        
        for(int i=0;i<nums.length;i++)
        {
            if(used[i]) continue;
            
            // prune unwanted branches, skip duplicate nodes
            if(i> 0 && nums[i-1]==nums[i] && !used[i-1]) continue;
            
            used[i]=true;
            l.add(nums[i]);
            permutation(nums, used, result, l, level+1);
            l.remove(l.size()-1);
            used[i]=false;
        }
    }
}

77. Combinations (Medium)
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
Example:
Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        combination(n, k, result, new ArrayList<Integer>(), 1, 0);
        return result;
    }
    
    public void combination(int n, int k, List<List<Integer>> result, List<Integer> l, int start, int level)
    {        
        if(level==k)
        {
            result.add(new ArrayList<Integer>(l));
            return;
        }
        
        for(int i=start;i<=n;i++)
        {
            l.add(i);
            combination(n,k, result, l, i+1, level+1);
            l.remove(l.size()-1);
        }
        
    }
}



78. Subsets [Medium]
Given a set of distinct integers, nums, return all possible subsets (the power set).
Note: The solution set must not contain duplicate subsets.
Example:
Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

class Solution {
    public List<List<Integer>> subsets(int[] nums) {        
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        subsetsHelper(nums, result, new ArrayList<Integer>(), 0);
        return result;
    }
    
    public void subsetsHelper(int[] nums, List<List<Integer>> result, List<Integer> l, int start)
    {        
            result.add(new ArrayList<Integer>(l));
        
        for(int i=start;i<nums.length;i++)
        {
            l.add(nums[i]);
            subsetsHelper(nums, result, l, i+1);
            l.remove(l.size()-1);
        }        
    }
    
}

90. Subsets II (Medium)
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).
Note: The solution set must not contain duplicate subsets.
Example:
Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> result =new ArrayList<List<Integer>>(); 
        Arrays.sort(nums); // sorting is important when there're duplicates
        subsetsHelper(nums, result, new ArrayList<Integer>(), 0);
        return result;
    }
    
    public void subsetsHelper(int[] nums, List<List<Integer>> result, List<Integer> l, int start)
    {
        result.add(new ArrayList<Integer>(l));
        for(int i=start;i<nums.length;i++)
        {
            if(i > start && nums[i-1]==nums[i]  ) continue;             
            l.add(nums[i]);
            subsetsHelper(nums, result, l, i+1);
            l.remove(l.size()-1);
        }
    }
}