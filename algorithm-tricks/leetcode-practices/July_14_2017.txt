112. Path Sum (Easy)
Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
Note: A leaf is a node with no children.
Example:
Given the below binary tree and sum = 22,
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
Given sum can be negataive as well.

    public boolean hasPathSum(TreeNode root, int sum) {
        return anyPathSumEqual(root, sum, 0);
    }
    
    public boolean anyPathSumEqual(TreeNode root, int target, int curSum)
    {
        if(root==null) return false;
        
        curSum+= root.val;        
        if(curSum==target && root.left==null && root.right==null) return true;
        
        return anyPathSumEqual(root.left, target, curSum) || anyPathSumEqual(root.right, target, curSum);
        
    }


113. Path Sum II (Medium)
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
Note: A leaf is a node with no children.
Example: Given the below binary tree and sum = 22,

    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> l = new ArrayList<Integer>();
        anyPathSumEqual(root, sum, 0, res, l);
        return res;        
    }
    
    public void anyPathSumEqual(TreeNode root, int target, int curSum, List<List<Integer>> res, List<Integer> l)
    {
        if(root==null) return;
        
        curSum+= root.val;
        l.add(root.val); 
        
        if(curSum==target && root.left == null && root.right == null)
            res.add(new ArrayList(l));
        else
        {
            anyPathSumEqual(root.left, target, curSum, res, l);
            anyPathSumEqual(root.right, target, curSum, res, l);
        }
        l.remove(l.size()-1); //backtracking
    }

437. Path Sum III (Easy)
You are given a binary tree in which each node contains an integer value.
Find the number of paths that sum to a given value.
The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).
The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

// not an efficient solution
//Typical recursive DFS.
//Space: O(n) due to recursion.
//Time: O(n^2) in worst case (no branching); O(nlogn) in best case (balanced tree).

public class Solution {
    public int pathSum(TreeNode root, int sum) {
        if (root == null) return 0;
        return pathSumFrom(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);
    }
    
    private int pathSumFrom(TreeNode node, int sum) {
        if (node == null) return 0;
        return (node.val == sum ? 1 : 0) 
            + pathSumFrom(node.left, sum - node.val) + pathSumFrom(node.right, sum - node.val);
    }
}

写递归的技巧是：明白一个函数的作用并相信它能完成这个任务，千万不要跳进这个函数里面企图探究更多细节，否则就会陷入无穷的细节无法自拔。你就算浑身是铁，能压几个栈？

按照前面说的技巧，先来定义清楚每个递归函数应该做的事：
pathSum 函数：给他一个节点和一个目标值，他返回以这个节点为根的树中，和为目标值的路径总数。
count 函数：给他一个节点和一个目标值，他返回以这个节点为根的树中，能凑出几个以该节点为路径开头，和为目标值的路径总数。

/* 有了以上铺垫，详细注释一下代码 */
int pathSum(TreeNode root, int sum) {
    if (root == null) return 0;
    int pathImLeading = count(root, sum); // 自己为开头的路径数
    int leftPathSum = pathSum(root.left, sum); // 左边路径总数（相信他能算出来）
    int rightPathSum = pathSum(root.right, sum); // 右边路径总数（相信他能算出来）
    return leftPathSum + rightPathSum + pathImLeading;
}
int count(TreeNode node, int sum) {
    if (node == null) return 0;
    // 我自己能不能独当一面，作为一条单独的路径呢？
    int isMe = (node.val == sum) ? 1 : 0;
    // 左边的小老弟，你那边能凑几个 sum - node.val 呀？
    int leftBrother = count(node.left, sum - node.val); 
    // 右边的小老弟，你那边能凑几个 sum - node.val 呀？
    int rightBrother = count(node.right, sum - node.val);
    return  isMe + leftBrother + rightBrother; // 我这能凑这么多个
}
还是那句话，明白每个函数能做的事，并相信他们能够完成。