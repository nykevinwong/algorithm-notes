167. Two Sum II - Input array is sorted

   public int[] twoSum(int[] numbers, int target) {
        int l = 0;
        int r = numbers.length-1;
        int[] res = new int[2];
        while(l < r)
        {
            int x = numbers[l]+numbers[r];
            
            if(target < x ) r--;
            else if(target > x) l++;
            else 
            { // target == x
                res[0] = l+1;
                res[1] = r+1;
                return res;
            }
        }
        
        return null;
    }

189. Rotate Array (Easy)

    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        int p = nums.length - k;
        swap(nums, 0, p-1);
        swap(nums, p, nums.length-1);
        swap(nums, 0, nums.length-1);
    }
    
    public void swap(int[] nums, int l, int r)
    {
        while(l<r)            
        {
            int temp = nums[r];
            nums[r] = nums[l];
            nums[l] = temp;
            l++; r--;
        }
    }

// 7. Reverse Integer 
// Given a 32-bit signed integer, reverse digits of an integer.

    public int reverse(int x) {
        int y = Math.abs(x);
        int r = 0;
        int q = 0;
        long ans = 0;
        
        while(y > 0)
        {
            q = y / 10;
            r = y % 10;
            
            ans = ans * 10 + r;            
            y = q;
        }
        
        if(x<0) ans = -ans;
        
        return (ans > Integer.MAX_VALUE || ans < Integer.MIN_VALUE) ? 0:(int)ans;
    }

13. Roman to Integer
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.

    public int romanToInt(String s) {
        HashMap<Character, Integer> map = new  HashMap<Character, Integer>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);


        int total = 0;
        for(int i=0;i<s.length();i++)
        {
            char c = s.charAt(i);
            boolean negative = false;
            
            if(i < s.length()-1)
            {
                negative |= (c=='I' && ( s.charAt(i+1)=='V' || s.charAt(i+1)=='X' ));
                negative |= (c=='X' && ( s.charAt(i+1)=='L' || s.charAt(i+1)=='C' ));
                negative |= (c=='C' && ( s.charAt(i+1)=='D' || s.charAt(i+1)=='M' ));
            }
            
            if(negative)    
            total -= map.get(c);
            else 
            total += map.get(c);
            
        }
        return total;
    }
    