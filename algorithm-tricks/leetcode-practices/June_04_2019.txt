167. Two Sum II - Input array is sorted. 两数之和 II - 有序的输入数组
给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。
说明:返回的下标值（index1 和 index2）不是从零开始的。你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。

    public int[] twoSum(int[] numbers, int target) {
        int l = 0, r = numbers.length -1;
        
        while(l<r)
        {
            int x = numbers[l]+numbers[r];
            
            if(x==target) return new int[] {l+1,r+1};
            if(x < target) l++;
            else r--;
        }
        
        return null;
    }

189. Rotate Array (Easy) 旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
Given an array, rotate the array to the right by k steps, where k is non-negative.
// Time: O(N), Space: O(1)
    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        int p = nums.length - k;
        reverse(nums, 0, p-1); //只在數組區間反轉
        reverse(nums, p, nums.length-1); //
        reverse(nums, 0, nums.length-1); //只在數組區間反轉,用nums.length-1
    }
    
    public void reverse(int[] nums, int l, int r)
    {
        while(l<r)            
        {
            int temp = nums[r];
            nums[r] = nums[l];
            nums[l] = temp;
            l++; r--;
        }
    }

// Time O(N^2), Space: O(1)
    public void rotate(int[] nums, int k) {
        if(nums==null || nums.length==0) return;
        k= k % nums.length;
        
        for(int i=0;i<k;i++)
            for(int j=nums.length-1;j>0;j--)
                swap(nums, j,j-1);
    }
    
    public void swap(int[] nums, int a, int b)
    {
        int t= nums[a];
        nums[a]=nums[b];
        nums[b]=t;
    }

// solution: both space and time are O(N)
    public void rotate(int[] nums, int k) {
        if(nums==null || nums.length==0) return;
        k= k % nums.length;
        int[] res = new int[nums.length];
        for(int i=0;i<k;i++)
        {
            res[i]=nums[nums.length-k+i];
        }
        
        for(int i=k, j=0;i<nums.length;i++)
        {
            res[i]=nums[j++];
        }
        System.arraycopy(res,0,nums,0,nums.length);
    }


7. Reverse Integer 反转整数
Given a 32-bit signed integer, reverse digits of an integer. 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. 
假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
请根据这个假设，如果反转后整数溢出那么就返回 0。

    public int reverse(int x) {
        int y = Math.abs(x);
        long ans = 0;
        while(y > 0)
        {
            int q = y / 10;
            int r = y % 10;
            ans = ans * 10 + r;
            y = q;
        }
        
        if(x<0) ans=-ans;
        // 別忘了要將long轉型至integer後再傳回.
        return (ans < Integer.MIN_VALUE || ans > Integer.MAX_VALUE) ? 0: (int)ans;
    }

13. Roman to Integer 罗马数字转整数    
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
I can be placed before V (5) and X (10) to make 4 and 9. I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
    public int romanToInt(String s) {
         if(s==null) return 0;
         HashMap<Character,Integer> m = new HashMap<>();
         m.put('I',1);
         m.put('V',5);
         m.put('X',10);
         m.put('L',50);
         m.put('C',100);
         m.put('D',500);
         m.put('M',1000);
        
        int total = 0;
        for(int i=0;i<s.length();i++)
        {
            char c = s.charAt(i);
            int value = m.get(c);
            boolean negative = false;
                        
            if(s.length() > 1 && i < s.length() - 1) 
            {// length=1 means it's positve. not last one. last one must be positive.
                char next = s.charAt(i+1);
                negative |= (c=='I' && (next == 'V' || next=='X'));
                negative |= (c=='X' && (next == 'L' || next=='C'));
                negative |= (c=='C' && (next == 'D' || next=='M'));
            }
            
            if(negative)
                total-=value;
            else
                total+=value;
        }
        
        return total;
    }
