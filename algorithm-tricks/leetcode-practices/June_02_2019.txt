127. Word Ladder (Medium) 单词接龙
Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:
给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：

Only one letter can be changed at a time. 每次转换只能改变一个字母。
Each transformed word must exist in the word list. 转换过程中的中间单词必须是字典中的单词。
Note that beginWord is not a transformed word.

Note: 说明:
Return 0 if there is no such transformation sequence. 如果不存在这样的转换序列，返回 0。
All words have the same length.所有单词具有相同的长度。
All words contain only lowercase alphabetic characters.所有单词只由小写字母组成。
You may assume no duplicates in the word list. 字典中不存在重复的单词。
You may assume beginWord and endWord are non-empty and are not the same.你可以假设 beginWord 和 endWord 是非空的，且二者不相同。

Example 1: Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"] Output: 5
Explanation: As one shortest transformation is (一个最短转换序列是) "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5. (返回它的长度 5)

Example 2: Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"] , Output: 0
Explanation: The endWord "cog" is not in wordList, therefore no possible transformation. 不在字典中，所以无法进行转换。

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> hs = new HashSet<String>(wordList);
        Queue<String> q = new LinkedList<String>();        
        if(!hs.contains(endWord)) return 0;
        int res = 0;
        q.offer(beginWord);
        
        while(!q.isEmpty())
        {
            for(int i=q.size()-1; i>=0; i--) 
            {
                String word = q.poll();        

                if(word.equals(endWord)) return res+1; // valid answer must contain endWord
                
                for(int j=0;j<word.length();j++)
                {
                    char[] newWord = word.toCharArray();
                    for(char c='a';c <= 'z';c++)
                    {
                        newWord[j]=c;
                        String s = String.valueOf(newWord); // or new String(newWord)                        
                        if(!s.equals(word) && hs.contains(s))
                        {
                            q.offer(s);
                            hs.remove(s);
                        }
                    }
                }
            }
            res++;            
        }
        
        return 0; // no valid answer
    }
}