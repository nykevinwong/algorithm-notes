336. Palindrome Pairs Hard
Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1: Input: ["abcd","dcba","lls","s","sssll"], Output: [[0,1],[1,0],[3,2],[2,4]] 
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
Example 2: Input: ["bat","tab","cat"] Output: [[0,1],[1,0]] 
Explanation: The palindromes are ["battab","tabbat"]

// O(N * (K^2) )
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        HashMap<String,Integer> m = new HashMap<>();
        
        for(int i=0;i<words.length;i++)
        {
            m.put(words[i], i);
        }
        
        for(int i=0;i<words.length;i++)
        {
            String w = words[i];
            for(int k=0; k <= w.length();k++)
            {
                String left = w.substring(0,k);
                String right = w.substring(k);
                if(isPalindrome(left))
                {
                    String reversedRight = new StringBuilder(right).reverse().toString();
                    if(m.containsKey(reversedRight) && 
                      i != m.get(reversedRight))
                    {
                        System.out.print("L:"+left);
                        List<Integer> l = new ArrayList<Integer>();
                        l.add(m.get(reversedRight));
                        l.add(i);
                        res.add(l);
                    }
                }
                
                // no need to check right when the left string contains the whole string and the right string contains empty one to prevent from adding inaccurate result
                if(isPalindrome(right) && right.length()!=0)
                {
                    String reversedLeft = new StringBuilder(left).reverse().toString();
                    if(m.containsKey(reversedLeft) &&
                      i != m.get(reversedLeft) )
                    {
                        System.out.println("R:"+ right);
                        List<Integer> l = new ArrayList<Integer>();
                        l.add(i);
                        l.add(m.get(reversedLeft));
                        res.add(l);
                    }
                }
                                
            }
        }
        
        return res;
    }
    
    public boolean isPalindrome(String s)
    {
        for(int l=0,r=s.length()-1; l <= r; l++,r--)
        {
            if(s.charAt(l)!=s.charAt(r)) return false;
        }
        return true;
    }   
