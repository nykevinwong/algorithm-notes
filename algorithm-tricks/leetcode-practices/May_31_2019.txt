567. Permutation in String (Medium)
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.
Example 1:
Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:
Input:s1= "ab" s2 = "eidboaoo"

class Solution { 
// this answer is incorrect due to run time is very bad.
// the correct answer uses silding window algorithm technique

    public boolean checkInclusion(String s1, String s2) {
        if(s2.length() < s1.length()) return false;
        boolean[] used = new boolean[s1.length()];
        return permutation(s1.toCharArray(), used, new StringBuilder(), s2);
    }
    
    public boolean permutation(char[] str,boolean[] used, StringBuilder sb, String s2)
    {
        if(sb.length()==str.length)
            return s2.contains(sb.toString());
        
        for(int i=0;i<str.length;i++)
        {
            if(used[i]) continue;
            used[i]=true;
            sb.append(str[i]);
            if(permutation(str, used, sb, s2)) return true;
            sb.deleteCharAt(sb.length()-1);
            used[i]=false;
        }
        
        return false;
    }
}
Output: False
 
Note:
The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

