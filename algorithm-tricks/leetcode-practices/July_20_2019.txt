198. House Robber (Easy)  打家劫舍
You are a professional robber planning to rob houses along a street. 你是一个专业的小偷，计划偷窃沿街的房屋。
Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses 
have security system connected (每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，)
and it will automatically contact the police if two adjacent houses were broken into on the same night.
如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

Example 1: Input: [1,2,3,1] ,Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
             Total amount you can rob = 1 + 3 = 4. 偷窃到的最高金额 = 1 + 3 = 4 

Example 2: Input: [2,7,9,3,1], Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
             Total amount you can rob = 2 + 9 + 1 = 12.

    public int rob(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        int[] dp= new int[nums.length];
        
        for(int i=0;i < nums.length; i++)
        {
            if(i-1 < 0)
            dp[i]= Math.max(nums[i], 0);
            else if(i-2 < 0)                
            dp[i]= Math.max(nums[i], dp[i-1]);
            else
            dp[i]= Math.max( dp[i-2] + nums[i], dp[i-1]);
            
        }
        
        return dp[nums.length-1];
    }
    
    // adjust to use a bigger array and update loop init and condition can
    // get rid of if-statement on some edge/corner cases.
    public int rob_2(int[] nums) {        
        int dp[]= new int [nums.length+2];
                
        for(int i=2;i < nums.length + 2; i++)
        {
            /* 
            // start with i = 2 and an array of nums.length+2 can cover below two cases
            if(i-1 < 0)
            dp[i]= Math.max(nums[i], 0);
            else if(i-2 < 0)                
            dp[i]= Math.max(nums[i] , dp[i-1]);
            else
                */
            dp[i]= Math.max( dp[i-2] + nums[i-2] , dp[i-1]);
            
        }
        
        return dp[nums.length+1];
    }
