72. Edit Distance (Hard)
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.
You have the following 3 operations permitted on a word:
Insert a character,Delete a character, Replace a character

        public int minDistance(String word1, String word2) {        
        if(word1==null && word2 ==null) return 0;
        if(word1==null) return word2.length();
        if(word2==null) return word1.length();
        
        int n = word1.length(); int m = word2.length();
        int[][] dp = new int[n+1][m+1];
                    
        // base case: if j = 0, return i
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=i; 
        }
            
        // base ase: if i = 0, return j
        for(int j=0;j<=m;j++)
        {
            dp[0][j]=j;
        }
            
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(word1.charAt(i-1)==word2.charAt(j-1)) // ensure index-1 is correct
                    dp[i][j] = dp[i-1][j-1];
                else
                {
                    dp[i][j] = Math.min( dp[i][j-1] , 
                                        Math.min( dp[i-1][j-1], dp[i-1][j] ) 
                                       ) + 1; 
                }
            }
        }
            return dp[n][m];        
    }

    
    public int minDistance_memorized(String word1, String word2) {        
        if(word1==null && word2 ==null) return 0;
        if(word1==null) return word2.length();
        if(word2==null) return word1.length();
        
        int[][] dp = new int[word1.length()+1][word2.length()+1];
        
        for(int i=0;i<=word1.length();i++)
        {
            for(int j=0;j<=word2.length();j++)
            {
                dp[i][j] = Integer.MIN_VALUE;
            }
        }
        
        return minEdit(word1, word2, word1.length(), word2.length(), dp);
    }

    public int minEdit(String word1, String word2, int i, int j, int[][] dp)
    {
        // max(i,j)  when i==0 or j ==0
        if(i==0) return j;
        if(j==0) return i;
        if(dp[i][j]>=0) return dp[i][j];
        
        if(word1.charAt(i-1) == word2.charAt(j-1))  // same character. no cost.
        {
            dp[i][j] = minEdit(word1, word2, i-1, j-1, dp);
            return dp[i][j];
        }
        
        // insert, replace different character, remove a character
        dp[i][j] = Math.min( minEdit(word1,word2, i, j-1, dp) , Math.min( minEdit(word1, word2, i-1, j-1, dp), minEdit(word1, word2, i-1, j, dp)) ) + 1;
        return dp[i][j];
    }
