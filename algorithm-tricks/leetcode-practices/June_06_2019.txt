239. Sliding Window Maximum (Hard)
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.
Example:
Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Note: 
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

    // O(nlogk) complexity, since add, pop and remove operation of PriorityQueue cost O(logk) time.
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length==0) return new int[] {};
        int[] res = new int[nums.length-k+1];
        
         PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });
        
        for(int i=0;i<k;i++)
             pq.add(nums[i]);
        
        int i = 0;
        for(i = k;i< nums.length;i++)
        {
            res[i-k] = pq.peek();
            pq.remove(nums[i-k]);
            pq.add(nums[i]);
        }
        
        res[i-k] = pq.peek();
        
        return res;             
    }

    // O(kN)
    public int[] maxSlidingWindow_BF(int[] nums, int k) {
        if(nums.length==0) return new int[] {};
        int[] res = new int[nums.length-k+1];
        int i; int max = 0;
        for(i = 0;i<= nums.length-k;i++)
        {
                max = Integer.MIN_VALUE;
            for(int j=i; j < i+k; j++)
                max = Math.max(nums[j], max);
            res[i] = max;
        }
        
        return res;
    }
