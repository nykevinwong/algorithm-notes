79. Word Search (Medium)
Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example: board = [
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']]
Given word = "ABCCED", return true. Given word = "SEE", return true. Given word = "ABCB", return false.

    public boolean exist(char[][] board, String word) {
        
        for(int i=0;i<board.length;i++)
            for(int j=0;j<board[0].length;j++)
            {
                if(matchString(board, j, i , word, 0))
                    return true;
            }
        
        return false;
    }
    
    public boolean matchString(char[][] board, int x, int y, String word, int index)
    {
        if(word==null ||
           x < 0 ||     // check valid boundary            
           y < 0 || 
           x > board[0].length-1 || 
           y > board.length-1 || 
           board[y][x]=='@' ||  // check if viisted
           board[y][x]!=word.charAt(index))  // check if the character is matched
            return false;
        
        // break condition
        if(word.length()==index+1) return true;
        
        char temp = board[y][x]; 
        board[y][x] = '@'; // mark as visited
        
        // check four direction
        boolean matched = matchString(board, x, y-1, word, index+1) ||
        matchString(board, x, y+1, word, index+1) ||
        matchString(board, x-1, y, word, index+1) ||
        matchString(board, x+1, y, word, index+1);            

        board[y][x] = temp; // backtracking
        
        return matched;        
    }
