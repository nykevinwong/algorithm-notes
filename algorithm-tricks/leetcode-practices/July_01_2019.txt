121. Best Time to Buy and Sell Stock (Easy)
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.
Note that you cannot sell a stock before you buy one.
Input: [7,1,5,3,6,4] Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.

    public int maxProfit_k_1(int[] prices) {
        // on ith day, i don't have a stock and i can do at most k transaction.
        // dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1]+prices[i]);
        // dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0]-prices[i])
        // dp[-1][k][0] = 0 // 沒開始前，沒持有股票時的最大獲利值。
        // dp[-1][k][1] = -infiity // 沒開始前，是不可能持有股票。這狀態不可能存在。
        // dp[i][0][0] = 0  // 沒法交易時的最大獲利值。
        // dp[i][0][1] = -infiity // 沒法交易時，是不可能持有股票。這狀態不可能存在。
        // 
        if(prices==null || prices.length==0) return 0;
        
        int n = prices.length;        
        int[][] dp = new int[n][2];
        
        for (int i = 0; i < n; i++) {
            if (i - 1 == -1) { 
                // calculate when i = 0
                dp[i][0] = 0;
                // 解释：
                //   dp[i][0] 
                // = max(dp[-1][0], dp[-1][1] + prices[i])
                // = max(0, -infinity + prices[i]) = 0
                dp[i][1] = -prices[i];
                //解释：
                //   dp[i][1] 
                // = max(dp[-1][1], dp[-1][0] - prices[i])
                // = max(-infinity, 0 - prices[i]) 
                // = -prices[i]
                continue;
            }
            dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i-1][1], -prices[i]);
        }
        return dp[n- 1][0];
    }
    
    public int maxProfit_k(int[] prices) {
        if(prices==null || prices.length==0) return 0;
        
        int n = prices.length;        
        int dp_i_0 = 0,  dp_i_1 = Integer.MIN_VALUE;
        
        for (int i = 0; i < n; i++) {
            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
            dp_i_1 = Math.max(dp_i_1, -prices[i]);
        }
        return dp_i_0;
    }

122. Best Time to Buy and Sell Stock II (Easy)
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

// when k = +infitiy transaction
    public int maxProfit(int[] prices) {
        if(prices==null || prices.length==0) return 0;
        
        int n = prices.length;
        int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
        
        for(int i=0;i<n;i++)
        {
            int temp = dp_i_0;
            dp_i_0 = Math.max(dp_i_0, dp_i_1+prices[i]);
            dp_i_1 = Math.max(dp_i_1, temp - prices[i]);
        }
        
        
        return dp_i_0;
    }

714. Best Time to Buy and Sell Stock with Transaction Fee
Medium
 // (1) k = +infiity transactions, (2) transactino fee
    public int maxProfit(int[] prices, int fee) {
        if(prices==null || prices.length==0) return 0;
        int n = prices.length;        
        int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
        
        for(int i=0;i<n;i++)
        {
            int temp = dp_i_0;
            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
            dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);            
        }
        
        return dp_i_0;
    }

309. Best Time to Buy and Sell Stock with Cooldown (Medium)

// +k infiity with Cooldown
    public int maxProfit(int[] prices) {
        if(prices==null || prices.length==0) return 0;
        int n = prices.length;
        int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
        int dp_i2_0 = 0;
        
        for(int i=0;i<n;i++)
        {
            int prev = dp_i_0;
            dp_i_0 = Math.max( dp_i_0, dp_i_1 + prices[i]);
            dp_i_1 = Math.max( dp_i_1, dp_i2_0 - prices[i]);
            dp_i2_0 = prev;
        }
        
        return dp_i_0;
    }
