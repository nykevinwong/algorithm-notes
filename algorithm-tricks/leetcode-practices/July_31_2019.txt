347. Top K Frequent Elements (Medium)
Given a non-empty array of integers, return the k most frequent elements.
Example 1: Input: nums = [1,1,1,2,2,3], k = 2, Output: [1,2]
Example 2: Input: nums = [1], k = 1 , Output: [1]
Note: You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer> m = new HashMap();
        
        for(int n : nums)
        {
            m.put(n, m.getOrDefault(n,0)+1);
        }
        
        PriorityQueue<Integer> pq = new PriorityQueue( (n1, n2) -> m.get(n1)-m.get(n2) );
        
        for(int n: m.keySet())
        {
            pq.add(n);
            if(pq.size() > k)
                pq.poll();
        }
        
        List<Integer> l = new LinkedList();
        
            while(!pq.isEmpty())
                    l.add(pq.poll());
        
        Collections.reverse(l);
        return l;    
    }

692. Top K Frequent Words (Medium)
Given a non-empty list of words, return the k most frequent elements.
Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.
Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2, Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.

    public List<String> topKFrequent(String[] words, int k) {        
        HashMap<String,Integer> m = new HashMap();
        
        for(String s : words)
        {
            m.put(s, m.getOrDefault(s, 0)+1);
        }
        
        PriorityQueue<String> pq = new PriorityQueue<String>(
                (s1, s2) -> m.get(s1)- m.get(s2) == 0 ?
                s2.compareTo(s1) : m.get(s1) - m.get(s2) );
        
        for(String s: m.keySet())
        {
            pq.add(s);
            if(pq.size() > k)
                pq.poll();
        }

        List<String> l = new LinkedList();
        while(!pq.isEmpty())
            l.add(pq.poll());
        Collections.reverse(l);
        
        return l;
    }
