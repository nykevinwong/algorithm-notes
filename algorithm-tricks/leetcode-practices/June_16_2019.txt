14. Longest Common Prefix (Easy)
Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string "".
Example 1: Input: ["flower","flow","flight"] Output: "fl"
Example 2: Input: ["dog","racecar","car"] Output: "" 
Explanation: There is no common prefix among the input strings.
Note: All given inputs are in lowercase letters a-z.

    public String longestCommonPrefix(String[] strs) {
        if(strs==null || strs.length==0) return "";
        
        for(int i=1;i<strs.length;i++)
        {
            String prev = strs[i-1], cur  = strs[i];
            int len = Math.min(prev.length(), cur.length()),  j =  0;
            while(j < len && prev.charAt(j)==cur.charAt(j)) j++; 
            if(j==0) return "";            
            strs[i] = strs[i].substring(0, j);
        }
        
        return strs[strs.length-1];
    }


33. Search in Rotated Sorted Array (Medium)
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).

Example 1: Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4
Example 2: Input: nums = [4,5,6,7,0,1,2], target = 3Output: -1

    public int search(int[] nums, int target) {
        int l = 0;
        int r = nums.length-1;
                
        while(l<=r)
        {
            int mid = l + (r-l)/ 2;
            
            if(nums[mid]==target) return mid;
            if(nums[mid] < nums[r]) // ascending range is on current right side
            {                
                // check based on current right side, which staisfy binary search condition
              if(nums[mid] < target && target <= nums[r]) l= mid+1;   
              else r = mid -1;
                    
            }
            else // nums[mid] >=  nums[r]. why use >= because we have l <=r.
            {    // ascending range is on the current left side
                // check based on current left side, which staisfy binary search condition
                if(nums[l] <= target && target < nums[mid]) r = mid-1;
                else l = mid + 1;                
            }            
            
        }
        
        return -1;        
    }


81. Search in Rotated Sorted Array II (Medium)
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
You are given a target value to search. If found in the array return true, otherwise return false.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0 Output: true Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3 Output: false
Follow up:
This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?


    public boolean search(int[] nums, int target) {
        int l = 0;
        int r = nums.length-1;
                
        while(l<=r)
        {
            int mid = l + (r-l)/ 2;
            
            if(nums[mid]==target) return true;
            if(nums[mid] < nums[r]) // ascending
            {
              if(nums[mid] < target && target <= nums[r]) l= mid+1;   
              else r = mid -1;
                    
            }
            else if(nums[mid] >  nums[r])
            { 
                if(nums[l] <= target && target < nums[mid]) r = mid-1;
                else l = mid + 1;                
            }            
            else if(nums[mid] == nums[r]) r--; //when it's duplicate
        }
        
        return false;        
    }

328. Odd Even Linked List (Medium)
Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.
You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.
Example 1: Input: 1->2->3->4->5->NULL Output: 1->3->5->2->4->NULL
Example 2: Input: 2->1->3->5->6->4->7->NULL Output: 2->3->6->7->1->5->4->NULL
Note:
The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...

    public ListNode oddEvenList(ListNode head) {
        if(head==null) return null;
        ListNode evenRoot = head.next;
        ListNode cur = head;
        
        while(cur!=null)
        {
            ListNode tempNext = cur.next;            
            if(tempNext!=null) cur.next = cur.next.next;
            cur = tempNext;
        }
        
        ListNode odd = head;
        while(odd!=null)
        {
            if(odd.next==null)
            {
                odd.next = evenRoot;
                break;
            }
            odd = odd.next;
        }
        
        return head;
    }