69. Sqrt(x)
Implement int sqrt(int x).
Compute and return the square root of x, where x is guaranteed to be a non-negative integer.
Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.
Example 1:  Input: 4 Output: 2
Example 2:  Input: 8 Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.

Binary Search: Time ~ O(logN), Space ~ O(1) 
Find a mid and check:
if x / mid < mid, move lower;
if x / mid > mid, move higher;
if x / mid == mid, return mid.
Don't compare x with mid * mid, which may lead to overflow.
Return lo.

    public int mySqrt(int x) {
        if(x<2) return x; // less than 2, which is 1. return 1.
        int l = 1; int r = x; // l not start from 0 to avoid divided by 0
        
        while(l<r)
        {
            int mid= l+(r-l)/2;
            int div = x / mid; //  divide by zero will cause an error
            
            if(div > mid) l=mid+1; // Don't compare x with mid * mid, which may lead to overflow.
            else if(div < mid) r=mid; 
            else // div == x
                return mid; // found
        }
        
        return l-1; // the cloest number
    }
