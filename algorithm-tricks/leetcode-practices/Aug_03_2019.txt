15. 3Sum (Medium)
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.

解法: 
首先，三數之和是用三個數字，要排除來源陣列大小小於三的情形。小於三，就不用找了，傳回代表無解的答案。
由於將用左右雙指標掃描陣列區間及排除崇復出現的數字，必須先將陣列排序。
除排除崇復出現的數字方法如下，在第一個迴圈中，檢查當前指標是否大於初始位置，並檢查當前指標位置的值是否等於上一個數值，若是的話，代表是崇復出現的數字，
用關鍵字 continue 到迴圈開頭。

第一個迴圈內固定當前指標位置的數，另一個內部迴圈左右掃描當前指標位置下個位置至整個陣列的區間。
左右指標分別代表其它兩個數。將左右指標指向的數值加上第一迴圈指標當前數就是三數之和。
檢查這三數之和是否等於目標值。若等於目標值，可以在此存入解答。
同時，在此可用兩個迴圈檢查左右指標的下一個值是否等於當前數值，也就是檢查是否有充覆數字。有就跳過。
小於目標值，就將左指標走一步。大於目標植，就讓右指標走一步。



class Solution {
    public List<List<Integer>> threeSum(int[] nums) {        
        List<List<Integer>> res = new ArrayList();
        int target = 0;
        
        if(nums==null || nums.length < 3) return res; // no solution when less than 3 items
                
        Arrays.sort(nums);
            
        for(int i=0; i < nums.length-2 ;i++)
        {
            if(i > 0 && nums[i]==nums[i-1]) continue; // skip duplicate
        
            int l = i + 1;
            int r = nums.length-1;
            
            while(l < r)
            {
                int x = nums[i]+nums[l]+nums[r];
                if(x==target)
                {
                    res.add(createSolution(nums, i, l, r));
                    
                    // skip duplicate
                    while(l < r && nums[l]==nums[l+1])l++;
                    while(l < r && nums[r]==nums[r-1])r--;
                    r--;
                    l--;
                }
                else if(x > target)
                {
                    r--;
                }
                else if(x < target)
                {
                    l++;
                }
            }
        }
        
        return res;
    }
    
    private List<Integer> createSolution(int[] nums, int i, int j, int k)
    {
        List<Integer> l = new ArrayList<Integer>();
        l.add(nums[i]);
        l.add(nums[j]);
        l.add(nums[k]);
        return l;
    }
    
}


16. 3Sum Closest (Medium)
Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
Example: Given array nums = [-1, 2, 1, -4], and target = 1.
The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

    public int threeSumClosest(int[] nums, int target) {
        int ans = 0;
        int closest = Integer.MAX_VALUE;
        
        if(nums==null || nums.length < 3) return ans; // no solution when less than 3 items
                
        Arrays.sort(nums);
            
        for(int i=0; i < nums.length-2 ;i++)
        {
            if(i > 0 && nums[i]==nums[i-1]) continue; // skip duplicate
        
            int l = i + 1;
            int r = nums.length-1;
            
            while(l < r)
            {
                int x = nums[i]+nums[l]+nums[r];
                int dist = Math.abs(target-x);
                
                if(closest > dist)
                {
                    closest = dist;
                    ans = x;
                }
                
                if(x==target)
                {
                    // skip duplicate
                    while(l < r && nums[l]==nums[l+1])l++;
                    while(l < r && nums[r]==nums[r-1])r--;
                    r--;
                    l--;
                }
                else if(x > target)
                {
                    r--;
                }
                else if(x < target)
                {
                    l++;
                }
            }
        }
        
        return ans;
    }


18. 4Sum (Medium)
Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? 
Find all unique quadruplets in the array which gives the sum of target.
Note: The solution set must not contain duplicate quadruplets.

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();

        Arrays.sort(nums);
        
        for(int i=0;i < nums.length-3;i++)
        {
            if(i > 0 && nums[i]==nums[i-1]) continue;
            
            for(int j=i+1;j < nums.length-2;j++)
            {                
                if(j > i+1 && nums[j]==nums[j-1]) continue;
                int l = j+1;
                int r = nums.length-1;
                while(l < r)
                {
                    int x = nums[i]+nums[j]+nums[l]+nums[r];
                    
                    if(x==target)
                    {
                        // add answers
                        res.add( Arrays.asList( nums[i], nums[j], nums[l], nums[r] ) );
                        // skip duplicate
                        
                        while(l < r && nums[l]==nums[l+1]) l++;
                        while(l < r && nums[r]==nums[r-1]) r--;
                        l++; r--;
                    }
                    else if(x > target)
                    {
                        r--;
                    }
                    else if(x < target)
                    {
                        l++;
                    }
                        
                    
                }
            }
            
        }
        
            return res;
    }


KSUM Example:

    public List<List<Integer>> fourSum(int[] nums, int target) {
        if(nums==null || nums.length < 4) return new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        return kSum(nums, 0, 4, target);        
    }
    
    public List<List<Integer>> kSum(int[] nums, int start, int k, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        if(k==2)
        {
            int l = start;
            int r = nums.length-1;
            
            while(l<r)
            {
                int x = nums[l]+nums[r];
                
                if(x==target)
                {
                    List<Integer> ls = new ArrayList<Integer>();
                    ls.add(nums[l]);
                    ls.add(nums[r]);
                    res.add(ls);
                    
                    while(l < r && nums[l]==nums[l+1]) l++;
                    while(l < r && nums[r]==nums[r-1]) r--;
                    
                    l++;
                    r--;
                }
                else if(x > target) { r--; }
                else if(x < target) { l++; }
            }
        }
        else
        {
            for(int i=start;i < nums.length ; i++)
            {
                if(i > start && nums[i]==nums[i-1] ) continue;
                int nextTarget = target - nums[i];
                
                List<List<Integer>> temp = kSum(nums, i+1, k-1, nextTarget);

                for(List<Integer> t : temp) {
                   t.add(0, nums[i]); // add current number
                }
                
                res.addAll(temp);
            }
        }
        
        return res;
    }
