76. Minimum Window Substring (Hard) 最小覆盖子串
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).
给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。
Example: Input: S = "ADOBECODEBANC", T = "ABC", Output: "BANC"
Note: If there is no such window in S that covers all characters in T, return the empty string "". 
如果 S 中不存这样的子串，则返回空字符串 ""。
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.
如果 S 中存在这样的子串，我们保证它是唯一的答案。

    public String minWindow(String s, String t) {
        int minStart = 0, minEnd = Integer.MAX_VALUE;
        HashMap<Character,Integer> m = new HashMap<>();

        for(int i=0;i < t.length();i++)
        {
            char c = t.charAt(i);
            m.put(c, m.getOrDefault(c,0)+1);  
        }

        int start = 0, end = 0;
        int counter = m.size();

        while(end < s.length())
        {
            char eChar = s.charAt(end);     
            
            if(m.containsKey(eChar))
            {
                m.put(eChar,m.get(eChar)-1);
                if(m.get(eChar)==0) counter--;
            }

            while(counter==0) // when the interval contains the valid string
            {
                // shrink the interval
                char sChar = s.charAt(start);     
                if(m.containsKey(sChar))
                {
                    m.put(sChar,m.get(sChar)+1);
                    if(m.get(sChar)==1) counter++;
                }
                
                if( (end-start) < (minEnd-minStart))
                {
                    minStart = start;
                    minEnd = end;
                }

                start++;
            }

            end++;
        }

        return (minEnd==Integer.MAX_VALUE) ? "":s.substring(minStart, minEnd+1);
    }

438. Find All Anagrams in a String (Easy) 找到字符串中所有字母异位词
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.
字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。
The order of output does not matter. 不考虑答案输出的顺序。

Example 1: Input: s: "cbaebabacd" p: "abc" ,Output: [0, 6]
字母异位词指字母相同，但排列不同的字符串。

    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<Integer>();
        if(s==null || p ==null) return res;
        
        int start = 0, end = 0;
        int len = 0, pLen = p.length();
        HashMap<Character,Integer> m = new HashMap<>();
        
        for(int i=0;i<p.length();i++)
        {
            char c = p.charAt(i);
            m.put(c,m.getOrDefault(c,0)+1);
        }
        
        int counter = m.size();
        
        while(end < s.length())
        {
            char eChar = s.charAt(end);
            
            if(m.containsKey(eChar))
            {
                m.put(eChar,m.get(eChar)-1);
                if(m.get(eChar)==0) counter--;
            }
            
            end++;            
            
            if( (end-start)==pLen)
            {
                if(counter==0) res.add(start);
                char sChar = s.charAt(start);

                if(m.containsKey(sChar))
                {
                    m.put(sChar,m.get(sChar)+1);
                    if(m.get(sChar)==1) counter++;
                }
                
                start++;               
            }
            
        }
        
        return res;
    }

