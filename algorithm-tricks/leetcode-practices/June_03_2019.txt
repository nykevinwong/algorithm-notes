11. Container With Most Water 盛最多水的容器
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). 给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。
n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). 在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。
Find two lines, which together with x-axis forms a container, such that the container contains the most water. 找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

Note: You may not slant the container and n is at least 2. 说明：你不能倾斜容器，且 n 的值至少为 2。
The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。
In this case, the max area of water (blue section) the container can contain is 49. 在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49
Example: Input: [1,8,6,2,5,4,8,3,7] Output: 49

class Solution {
    public int maxArea(int[] height) {
        int l =0, r = height.length-1;
        int maxWater = 0;        
        
        while(l < r)
        {
            int minHeight = Math.min(height[l],height[r]);
            maxWater= Math.max( (r-l)* minHeight, maxWater); 
            // ** don't make a mistake here. r-l (no space for water ) is correct. not r-l+1 (has space)
            
        // trying to find a bigger height[l], l++ means trying to find a maximum and vice versa. use r-- if trying to find the minimum.
            if(height[l] < height[r])
                l++; 
            else
                r--;
        }
        return maxWater;
    }
}

42. Trapping Rain Water (Hard) 接雨水
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，
In this case, 6 units of rain water (blue section) are being trapped. 在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 
Thanks Marcos for contributing this image! 感谢 Marcos 贡献此图。

Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6

class Solution {
    public int trap(int[] height) {        
        int l = 0, r = height.length-1;
        int lmax = 0, rmax = 0;
        int water = 0;
        
        while(l < r)
        { // no need to check l=r. when l=r, no water is contained.

            if(height[l] <= height[r])
            {
                lmax = Math.max(lmax, height[l]);
                water += lmax - height[l]; // add the water of the current height at current position
                l++;
            }
            else
            {
                rmax = Math.max(rmax, height[r]);
                water += rmax - height[r]; 
                r--;
            }
        }    
        return water;
    }
}