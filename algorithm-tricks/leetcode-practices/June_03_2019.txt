11. Container With Most Water

Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.
The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49

class Solution {
    public int maxArea(int[] height) {
        int l =0, r = height.length-1;
        int maxWater = 0;        
        int minHeight = 0;
        
        while(l < r)
        {
            minHeight = Math.min(height[l],height[r]);
            maxWater= Math.max( (r-l)* minHeight, maxWater);
            if(height[l] < height[r])
                l++;
            else
                r--;
        }
        return maxWater;
    }
}

42. Trapping Rain Water (Hard)
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!
Example:
Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

class Solution {
    public int trap(int[] height) {        
        int l = 0, r = height.length-1;
        int lmax = 0, rmax = 0;
        int water = 0;
        
        while(l < r)
        {
            if(height[l] <= height[r])
            {
                lmax = Math.max(lmax, height[l]);
                water += lmax - height[l];
                l++;
            }
            else
            {
                rmax = Math.max(rmax, height[r]);
                water += rmax - height[r];
                r--;
            }
        }
        
        return water;
    }
}