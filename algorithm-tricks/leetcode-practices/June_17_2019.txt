237. Delete Node in a Linked List (Easy)
Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.
Given linked list -- head = [4,5,1,9], which looks like following:
Example 1: Input: head = [4,5,1,9], node = 5 Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.

    public void deleteNode(ListNode node) {
        if(node!=null && node.next!=null)
        {
            node.val = node.next.val;
            node.next = node.next.next;
        }
    }

234. Palindrome Linked List (Easy)
Given a singly linked list, determine if it is a palindrome.
Example 1: Input: 1->2 Output: false
Example 2: Input: 1->2->2->1 Output: true
Follow up: Could you do it in O(n) time and O(1) space?

    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return true;
        
        ListNode middle = null;
         middle =   findMiddle(head);
        ListNode last = reverse(middle);
        return compare(head, last);
        
    }
    
    public ListNode findMiddle(ListNode root)
    {
        if(root==null) return null;
        ListNode slow = root;
        ListNode fast = root;
        
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public ListNode reverse(ListNode m){
        ListNode next = null;
        ListNode prev = null;
        ListNode curr = m;
        while(curr != null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
    public boolean compare(ListNode head, ListNode last){
      
       ListNode curr = head;
        while(last != null){
            if(curr.val != last.val) return false;
            curr = curr.next;
            last = last.next;
        }
        return true;
    }

203. Remove Linked List Elements (Easy)
Remove all elements from a linked list of integers that have value val.
Example: Input:  1->2->6->3->4->5->6, val = 6 Output: 1->2->3->4->5

    public ListNode removeElements(ListNode head, int val) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode cur = head;
        ListNode prev = dummy;
        
        while(cur!=null)
        {
            if(cur.val==val)
            {
                prev.next = cur.next;
            }
            else
            {
                prev = cur;
            }
            
                cur=cur.next;
        }
        
        return dummy.next;
    }

23. Merge k Sorted Lists (Hard)
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
Example:
Input: 
[ 1->4->5,
  1->3->4,
  2->6   
]  Output: 1->1->2->3->4->4->5->6

    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null || lists.length==0) return null;
        
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>(lists.length, new Comparator<ListNode>(){
            @Override
            public int compare(ListNode a, ListNode b)
            {
                return a.val-b.val;
            }
        });
        
        for(ListNode l: lists)
        {
            if(l!=null) pq.add(l);
        }
        
        while(!pq.isEmpty())
        {
            ListNode minimum = pq.poll();
            if(minimum.next!=null) pq.add(minimum.next);
            cur.next = minimum;
            minimum.next = null;
            cur = cur.next;
        }
        
        return dummy.next;
    }
