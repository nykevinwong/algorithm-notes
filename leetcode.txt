26. Remove Duplicates from Sorted Array
Given a sorted array nums, remove the duplicates in-place such that each element appear "only once" and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

public int removeDuplicates(int[] nums) {
        int j = 1;
        for(int i=1;i<nums.length;i++)
            if(nums[i]!=nums[j-1])
                nums[j++]=nums[i];
        return j;
    }
    
80. Remove Duplicates from Sorted Array II
Given a sorted array nums, remove the duplicates in-place such that duplicates appeared "at most twice" and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

  public int removeDuplicates(int[] nums) {
        int j = 2;
        for(int i=2;i<nums.length;i++)
            if(nums[i]!=nums[j-2])
                nums[j++]=nums[i];
        return j;
    }

33. Search in Rotated Sorted Array
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

    public int search(int[] nums, int target) {
        int first = 0;
        int last = nums.length;
        
        while(first!=last)
        {
            int mid = first + (last-first)/ 2;
            
            if(nums[mid]==target) return mid;
            
            if(nums[first] < nums[mid])
            {
               if(nums[first] <= target && target < nums[mid])
                   last = mid;
               else 
                   first = mid + 1;            
            }
            else
            {

               if(nums[mid] < target && target <= nums[last-1])
                   first = mid + 1;
               else 
                   last = mid;            

            }
        }
        
        return -1;
    }
    
81. Search in Rotated Sorted Array II
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

    public boolean search(int[] nums, int target) {
        int first = 0;
        int last = nums.length;
        
        while(first!=last)
        {
            int mid = first + (last-first)/ 2;
            
            if(nums[mid]==target) return true;
            
            if(nums[first] < nums[mid])
            {
               if(nums[first] <= target && target < nums[mid])
                   last = mid;
               else 
                   first = mid + 1;            
            }
            else if(nums[first] > nums[mid])
            {

               if(nums[mid] < target && target <= nums[last-1])
                   first = mid + 1;
               else 
                   last = mid;            

            }
            else first++;
        }
        
        return false; 
    }

153. Find Minimum in Rotated Sorted Array

Possible Solutions:
A simple O(N) time-complexity solution is to traverse the complete array and find minimum.


